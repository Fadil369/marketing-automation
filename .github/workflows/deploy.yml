name: Deploy BrainSAIT Marketing Platform

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  # Security and quality checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript check
        run: npm run typecheck

  # Test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security, quality]
    strategy:
      matrix:
        test-type: [unit, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Install Playwright
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: ${{ matrix.environment }}
          ENVIRONMENT: ${{ matrix.environment }}

      - name: Run bundle analysis
        if: matrix.environment == 'production'
        run: npm run build:analyze

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 7

      - name: Upload bundle analysis
        if: matrix.environment == 'production'
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: bundle-report.html

  # Deploy to development (automatic on develop branch)
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: https://dev.brainsait.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-development
          path: dist/

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy Workers
        run: wrangler publish --env development
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Pages
        run: wrangler pages publish dist --project-name brainsait-marketing-dev
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Run deployment health check
        run: |
          sleep 30
          curl -f https://api-dev.brainsait.com/health || exit 1

  # Deploy to staging (automatic on staging branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.brainsait.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: dist/

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy Workers
        run: wrangler publish --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Pages
        run: wrangler pages publish dist --project-name brainsait-marketing-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Run deployment health check
        run: |
          sleep 30
          curl -f https://api-staging.brainsait.com/health || exit 1

      - name: Run performance tests
        run: npm run performance:test

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://app.brainsait.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Create deployment backup
        run: |
          echo "Creating backup of current production deployment..."
          # In a real scenario, you would backup current state

      - name: Deploy Workers
        run: wrangler publish --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Pages
        run: wrangler pages publish dist --project-name brainsait-marketing
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Wait for deployment propagation
        run: sleep 60

      - name: Run comprehensive health checks
        run: |
          echo "Running health checks..."
          curl -f https://api.brainsait.com/health || exit 1
          curl -f https://app.brainsait.com/ || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here

      - name: Update monitoring
        run: |
          echo "Updating monitoring and alerting..."
          # Add monitoring update commands here

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üöÄ BrainSAIT Marketing Platform successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå BrainSAIT Marketing Platform deployment to production failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Monitor deployment for 5 minutes
        run: |
          echo "Monitoring deployment health for 5 minutes..."
          for i in {1..10}; do
            echo "Health check $i/10..."
            curl -f https://api.brainsait.com/health || exit 1
            sleep 30
          done

      - name: Run lighthouse audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://app.brainsait.com
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check error rates
        run: |
          echo "Checking error rates in production..."
          # Add error rate monitoring here

      - name: Update status page
        run: |
          echo "Updating status page..."
          # Add status page update here

# Workflow permissions
permissions:
  contents: read
  deployments: write
  statuses: write
  checks: write
  pull-requests: write